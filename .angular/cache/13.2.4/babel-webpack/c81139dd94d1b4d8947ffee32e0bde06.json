{"ast":null,"code":"export class FuseValidators {\n  /**\n   * Check for empty (optional fields) values\n   *\n   * @param value\n   */\n  static isEmptyInputValue(value) {\n    return value == null || value.length === 0;\n  }\n  /**\n   * Must match validator\n   *\n   * @param controlPath A dot-delimited string values that define the path to the control.\n   * @param matchingControlPath A dot-delimited string values that define the path to the matching control.\n   */\n\n\n  static mustMatch(controlPath, matchingControlPath) {\n    return formGroup => {\n      // Get the control and matching control\n      const control = formGroup.get(controlPath);\n      const matchingControl = formGroup.get(matchingControlPath); // Return if control or matching control doesn't exist\n\n      if (!control || !matchingControl) {\n        return null;\n      } // Delete the mustMatch error to reset the error on the matching control\n\n\n      if (matchingControl.hasError('mustMatch')) {\n        delete matchingControl.errors.mustMatch;\n        matchingControl.updateValueAndValidity();\n      } // Don't validate empty values on the matching control\n      // Don't validate if values are matching\n\n\n      if (this.isEmptyInputValue(matchingControl.value) || control.value === matchingControl.value) {\n        return null;\n      } // Prepare the validation errors\n\n\n      const errors = {\n        mustMatch: true\n      }; // Set the validation error on the matching control\n\n      matchingControl.setErrors(errors); // Return the errors\n\n      return errors;\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}