{"ast":null,"code":"import { ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../user/user.service\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(http, router, _userService) {\n      this.http = http;\n      this.router = router;\n      this._userService = _userService;\n      this.userIdentity = null;\n      this.authenticationState = new ReplaySubject(1);\n    }\n\n    save(account) {\n      return this.http.post(environment.apiUrl + '/account', account);\n    }\n\n    authenticate(identity) {\n      this.userIdentity = identity;\n      this.authenticationState.next(this.userIdentity);\n      this._userService.user = identity;\n    }\n\n    hasAnyAuthority(authorities, isMenu) {\n      if (!this.userIdentity || !this.userIdentity.authorities) {\n        return false;\n      }\n\n      if (!Array.isArray(authorities)) {\n        authorities = [authorities];\n      }\n\n      const modules = [];\n      this.userIdentity.authorities.forEach(auth => {\n        if (!modules.includes(auth.moduleName)) modules.push(auth.moduleName);\n      });\n      const roleAdmin = this.userIdentity.login === 'admin' ? ['ROLE_ADMIN'] : [];\n      return this.userIdentity.authorities.map(auth => `${auth.moduleName}.${auth.code}`).concat(modules).concat(roleAdmin).some(authority => authorities.includes(authority));\n    }\n\n    identity(force) {\n      if (!this.accountCache$ || force || !this.isAuthenticated()) {\n        this.accountCache$ = this.fetch().pipe(catchError(() => {\n          return of(null);\n        }), tap(account => {\n          this.authenticate(account); // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          // if (account && account.langKey) {\n          //     const langKey = this.sessionStorage.retrieve('locale') || account.langKey;\n          // }\n\n          if (account) {\n            this.navigateToStoredUrl();\n          }\n        }), shareReplay());\n      }\n\n      return this.accountCache$;\n    }\n\n    isAuthenticated() {\n      return this.userIdentity !== null;\n    }\n\n    getAuthenticationState() {\n      return this.authenticationState.asObservable();\n    }\n\n    getImageUrl() {\n      return this.userIdentity ? this.userIdentity.imageUrl : '';\n    }\n\n    fetch() {\n      return this.http.get(environment.apiUrl + '/account');\n    }\n\n    navigateToStoredUrl() {// previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n      // if login is successful, go to stored previousState and clear previousState\n      // const previousUrl = this.stateStorageService.getUrl();\n      // if (previousUrl) {\n      //     this.stateStorageService.clearUrl();\n      //     this.router.navigateByUrl(previousUrl);\n      // }\n    }\n\n    getListConsent() {\n      return this.http.get(`${environment.apiUrl}/consents`);\n    }\n\n    getListScript() {\n      return this.http.get(`${environment.apiUrl}/scripts`);\n    }\n\n    createScript(body) {\n      return this.http.post(`${environment.apiUrl}/script`, body);\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UserService));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}