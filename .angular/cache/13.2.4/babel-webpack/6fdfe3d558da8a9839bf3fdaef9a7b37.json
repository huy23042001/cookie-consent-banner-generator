{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_authService, _router, matSnackBar) {\n      this._authService = _authService;\n      this._router = _router;\n      this.matSnackBar = matSnackBar;\n    }\n    /**\r\n     * Intercept\r\n     *\r\n     * @param req\r\n     * @param next\r\n     */\n\n\n    intercept(req, next) {\n      // Clone the request object\n      let newReq = req.clone(); // Request\n      //\n      // If the access token didn't expire, add the Authorization header.\n      // We won't add the Authorization header if the access token expired.\n      // This will force the server to return a \"401 Unauthorized\" response\n      // for the protected API routes which our response interceptor will\n      // catch and delete the access token from the local storage while logging\n      // the user out from the app.\n      // if ( this._authService.accessToken && !AuthUtils.isTokenExpired(this._authService.accessToken) )\n\n      if (this._authService.accessToken) {\n        newReq = req.clone({\n          headers: req.headers.set('Authorization', 'Bearer ' + this._authService.accessToken)\n        });\n      } // Response\n\n\n      return next.handle(newReq).pipe(catchError(error => {\n        var _a; // Catch \"401 Unauthorized\" responses\n\n\n        if (error instanceof HttpErrorResponse && (error.status === 401 || error.url.includes('/account') && error.status === 500)) {\n          // Sign out\n          this._authService.signOut(); // Reload the app\n          // location.reload();\n\n        }\n\n        if (error instanceof HttpErrorResponse && error.status === 403 && error.url.includes('/account')) {\n          this._router.navigateByUrl('unlock-session');\n        }\n\n        if (error instanceof HttpErrorResponse && error.status === 400 || error.status === 405 || error.status === 500) {\n          this.matSnackBar.open(((_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.message) || 'Có lỗi xảy ra', null, {\n            panelClass: 'bg-red-500'\n          });\n        }\n\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}