{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/auth/account.service\";\nexport let HasAnyAuthorityDirective = /*#__PURE__*/(() => {\n  class HasAnyAuthorityDirective {\n    constructor(accountService, templateRef, viewContainerRef) {\n      this.accountService = accountService;\n      this.templateRef = templateRef;\n      this.viewContainerRef = viewContainerRef;\n      this.authorities = [];\n    }\n\n    set hasAnyAuthority(value) {\n      this.authorities = typeof value === 'string' ? [value] : value;\n      this.updateView(); // Get notified each time authentication state changes.\n\n      this.authenticationSubscription = this.accountService.getAuthenticationState().subscribe(() => this.updateView());\n    }\n\n    ngOnDestroy() {\n      if (this.authenticationSubscription) {\n        this.authenticationSubscription.unsubscribe();\n      }\n    }\n\n    updateView() {\n      const hasAnyAuthority = this.accountService.hasAnyAuthority(this.authorities);\n      this.viewContainerRef.clear();\n\n      if (hasAnyAuthority || true) {\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\n      }\n    }\n\n  }\n\n  HasAnyAuthorityDirective.ɵfac = function HasAnyAuthorityDirective_Factory(t) {\n    return new (t || HasAnyAuthorityDirective)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n\n  HasAnyAuthorityDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: HasAnyAuthorityDirective,\n    selectors: [[\"\", \"hasAnyAuthority\", \"\"]],\n    inputs: {\n      hasAnyAuthority: \"hasAnyAuthority\"\n    }\n  });\n  return HasAnyAuthorityDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}