{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { createRequestOption } from \"../../../shared/request-util\";\nimport { environment } from \"../../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SettingService = /*#__PURE__*/(() => {\n  class SettingService {\n    constructor(http) {\n      this.http = http; // cache data when navigate from user config to user detail\n\n      this.CurrentUserManagement = {};\n      this.userMessChange = new Subject();\n      this.resourceUrl = `${environment.apiUrl}/users`;\n    }\n\n    getSearchServerByID(id) {\n      return this.http.get(`${environment.apiUrl}/server/searchServerByCluster?id=` + id, {\n        observe: 'response'\n      });\n    }\n\n    getItemCluster() {\n      return this.http.get(`${environment.apiUrl}/clusters`, {\n        observe: 'response'\n      });\n    }\n\n    create(user) {\n      return this.http.post(this.resourceUrl, user);\n    }\n\n    update(user) {\n      return this.http.put(this.resourceUrl, user);\n    }\n\n    getListWpGroup() {\n      return this.http.get(`${environment.apiUrl}/team`, {\n        observe: 'response'\n      });\n    }\n\n    updateReadedMess(data) {\n      return this.http.put(`${environment.apiUrl}/notification-users/saveAll`, data);\n    }\n\n    updateStatus(user) {\n      return this.http.put(`${environment.apiUrl}/users/update-status`, user);\n    }\n\n    resetPass(id) {\n      return this.http.post(`${environment.apiUrl}/users/reset-password/${id}`, null);\n    }\n\n    find(login) {\n      return this.http.get(`${this.resourceUrl}/${login}`, {\n        observe: 'response'\n      });\n    }\n\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n\n    delete(login) {\n      return this.http.delete(`${this.resourceUrl}/${login}`);\n    }\n\n    getNotifications(userId) {\n      return this.http.get(`${environment.apiUrl}/notification/count-notice-of-user/${userId}`, {\n        observe: 'response'\n      });\n    }\n\n    getUserChat(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl}/notifications`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n\n    getMessage(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${environment.apiUrl}/notifications`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n\n    downloadFile(downloadLink) {\n      return this.http.get(`${environment.apiUrl}/notification/get-file?type=type&&path=${downloadLink}`);\n    }\n\n    deleteMessage(data) {\n      return this.http.put(`${environment.apiUrl}/notification-users/saveAll`, data);\n    }\n\n    authorities() {\n      return this.http.get(`${environment.apiUrl}/users/authorities`);\n    }\n\n    getAuthority() {\n      return this.http.get(`${environment.apiUrl}/authority`);\n    }\n\n    getHdfsUser() {\n      return this.http.get(`${environment.apiUrl}/users-vt/searchDHdfsUser`, {\n        observe: 'response'\n      });\n    }\n\n    addUser(data) {\n      return this.http.post(`${environment.apiUrl}/users/addUser`, data);\n    }\n\n    addOrEditGroup(obj) {\n      if (!(obj === null || obj === void 0 ? void 0 : obj.id)) {\n        return this.http.post(`${environment.apiUrl}/team`, obj, {\n          observe: 'response'\n        });\n      } else {\n        return this.http.put(`${environment.apiUrl}/team`, obj, {\n          observe: 'response'\n        });\n      }\n    }\n\n    deleteGroup(id) {\n      return this.http.delete(`${environment.apiUrl}/team/${id}`, {\n        observe: 'response'\n      });\n    }\n\n    deleteCluster(id) {\n      return this.http.delete(`${environment.apiUrl}/clusters/${id}`, {\n        observe: 'response'\n      });\n    }\n\n  }\n\n  SettingService.ɵfac = function SettingService_Factory(t) {\n    return new (t || SettingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SettingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingService,\n    factory: SettingService.ɵfac,\n    providedIn: 'root'\n  });\n  return SettingService;\n})();","map":null,"metadata":{},"sourceType":"module"}