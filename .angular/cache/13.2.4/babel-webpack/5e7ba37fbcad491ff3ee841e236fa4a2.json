{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction ErrorMessageComponent_div_0_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const error_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(error_r2);\n  }\n}\n\nfunction ErrorMessageComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ErrorMessageComponent_div_0_p_1_Template, 2, 1, \"p\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.listOfErrors());\n  }\n}\n\nexport let ErrorMessageComponent = /*#__PURE__*/(() => {\n  class ErrorMessageComponent {\n    constructor() {\n      this.name = 'Trường này';\n      this.textPatterm = 'Trường này';\n      this.errorMessages = {\n        required: (params, name) => `${name} là trường bắt buộc`,\n        pattern: (params, name) => `${this.textPatterm}`,\n        onlyNumber: (params, name) => `${name} value must be number`,\n        minlength: (params, name) => `Length of ${name} can not lower than ${params.requiredLength} characters`,\n        maxlength: (params, name) => `Length of ${name} can not exceed ${params.requiredLength} characters`,\n        minNumber: (params, name) => `Value of ${name} can not lower than ${params.message}`,\n        maxNumber: (params, name) => `Value of ${name} can not exceed ${params.message}`,\n        uniqueName: (params, name) => params.message,\n        mustMatch: () => `Mật khẩu không trùng khớp`\n      };\n    }\n\n    shouldShowErrors() {\n      var _a;\n\n      return ((_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) && (this.control.dirty || this.control.touched);\n    }\n\n    listOfErrors() {\n      return Object.keys(this.control.errors).map(field => this.getMessage(field, this.control.errors[field]));\n    }\n\n    getMessage(type, params) {\n      return this.errorMessages[type](params, this.name);\n    }\n\n  }\n\n  ErrorMessageComponent.ɵfac = function ErrorMessageComponent_Factory(t) {\n    return new (t || ErrorMessageComponent)();\n  };\n\n  ErrorMessageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ErrorMessageComponent,\n    selectors: [[\"app-error-message\"]],\n    inputs: {\n      control: \"control\",\n      name: \"name\",\n      textPatterm: \"textPatterm\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"class\", \"text-red-500 font-semibold pt-1\", \"style\", \"font-size: 13px\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-red-500\", \"font-semibold\", \"pt-1\", 2, \"font-size\", \"13px\"]],\n    template: function ErrorMessageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ErrorMessageComponent_div_0_Template, 2, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.shouldShowErrors());\n      }\n    },\n    directives: [i1.NgIf, i1.NgForOf],\n    styles: [\"div[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{display:none}div[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-child{display:block}\"]\n  });\n  return ErrorMessageComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}