{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FuseLoadingService = /*#__PURE__*/(() => {\n  class FuseLoadingService {\n    /**\r\n     * Constructor\r\n     */\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      this._auto$ = new BehaviorSubject(true);\n      this._mode$ = new BehaviorSubject('indeterminate');\n      this._progress$ = new BehaviorSubject(0);\n      this._show$ = new BehaviorSubject(false);\n      this._urlMap = new Map();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Getter for auto mode\r\n     */\n\n\n    get auto$() {\n      return this._auto$.asObservable();\n    }\n    /**\r\n     * Getter for mode\r\n     */\n\n\n    get mode$() {\n      return this._mode$.asObservable();\n    }\n    /**\r\n     * Getter for progress\r\n     */\n\n\n    get progress$() {\n      return this._progress$.asObservable();\n    }\n    /**\r\n     * Getter for show\r\n     */\n\n\n    get show$() {\n      return this._show$.asObservable();\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Show the loading bar\r\n     */\n\n\n    show() {\n      this._show$.next(true);\n    }\n    /**\r\n     * Hide the loading bar\r\n     */\n\n\n    hide() {\n      this._show$.next(false);\n    }\n    /**\r\n     * Set the auto mode\r\n     *\r\n     * @param value\r\n     */\n\n\n    setAutoMode(value) {\n      this._auto$.next(value);\n    }\n    /**\r\n     * Set the mode\r\n     *\r\n     * @param value\r\n     */\n\n\n    setMode(value) {\n      this._mode$.next(value);\n    }\n    /**\r\n     * Set the progress of the bar manually\r\n     *\r\n     * @param value\r\n     */\n\n\n    setProgress(value) {\n      if (value < 0 || value > 100) {\n        console.error('Progress value must be between 0 and 100!');\n        return;\n      }\n\n      this._progress$.next(value);\n    }\n    /**\r\n     * Sets the loading status on the given url\r\n     *\r\n     * @param status\r\n     * @param url\r\n     */\n\n\n    _setLoadingStatus(status, url) {\n      // Return if the url was not provided\n      if (!url) {\n        console.error('The request URL must be provided!');\n        return;\n      }\n\n      if (status === true) {\n        this._urlMap.set(url, status);\n\n        this._show$.next(true);\n      } else if (status === false && this._urlMap.has(url)) {\n        this._urlMap.delete(url);\n      } // Only set the status to 'false' if all outgoing requests are completed\n\n\n      if (this._urlMap.size === 0) {\n        this._show$.next(false);\n      }\n    }\n\n  }\n\n  FuseLoadingService.ɵfac = function FuseLoadingService_Factory(t) {\n    return new (t || FuseLoadingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FuseLoadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseLoadingService,\n    factory: FuseLoadingService.ɵfac,\n    providedIn: 'root'\n  });\n  return FuseLoadingService;\n})();","map":null,"metadata":{},"sourceType":"module"}